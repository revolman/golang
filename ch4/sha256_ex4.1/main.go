// Упражнение 4.1 - подсчитываю количество не совпадающих байтов
package main

import (
	"crypto/sha256"
	"fmt"
)

func main() {
	c1 := sha256.Sum256([]byte("x"))
	c2 := sha256.Sum256([]byte("X"))
	fmt.Printf("%b\n%b\n", c1, c2)
	fmt.Printf("Различается %d бит.\n", popCount(c1, c2))
}

func popCount(c1 [32]uint8, c2 [32]uint8) int {
	var result int

	for i, v1 := range c1 { // в цикле для каждого элемента среза
		fmt.Printf("v1 = %08b\n", v1)    // выводится двоичный элемент первого среза (для наглядности)
		fmt.Printf("v2 = %08b\n", c2[i]) // выводится двоичный элемент второго среза (для наглядности)
		// выполняется побитовое исключающее ИЛИ,
		// в результате останутся только те биты, которые не равны
		q := c1[i] ^ c2[i]
		fmt.Printf("q  = %08b\n", q) // вывожу результат предыдущей операции (для наглядности)
		for q != 0 {                 // Использую алгоритм подсчёта битов из упражнения 2.5
			q &= q - 1
			result++
			fmt.Printf("q = %b, result = %d\n", q, result) // вывожу промежуточный результат (для наглядности)
		}
	}

	return result
}
